import 'package:meta/meta.dart';

/// Amazon Inspector
///
/// Amazon Inspector enables you to analyze the behavior of your AWS resources
/// and to identify potential security issues. For more information, see
/// [Amazon Inspector User
/// Guide](https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html).
class InspectorApi {
  /// Assigns attributes (key and value pairs) to the findings that are
  /// specified by the ARNs of the findings.
  ///
  /// [findingArns]: The ARNs that specify the findings that you want to assign
  /// attributes to.
  ///
  /// [attributes]: The array of attributes that you want to assign to specified
  /// findings.
  Future<AddAttributesToFindingsResponse> addAttributesToFindings(
      {@required List<String> findingArns,
      @required List<Attribute> attributes}) async {
    return AddAttributesToFindingsResponse.fromJson({});
  }

  /// Creates a new assessment target using the ARN of the resource group that
  /// is generated by CreateResourceGroup. If resourceGroupArn is not specified,
  /// all EC2 instances in the current AWS account and region are included in
  /// the assessment target. If the [service-linked
  /// role](https://docs.aws.amazon.com/inspector/latest/userguide/inspector_slr.html)
  /// isn’t already registered, this action also creates and registers a
  /// service-linked role to grant Amazon Inspector access to AWS Services
  /// needed to perform security assessments. You can create up to 50 assessment
  /// targets per AWS account. You can run up to 500 concurrent agents per AWS
  /// account. For more information, see  [Amazon Inspector Assessment
  /// Targets](https://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html).
  ///
  /// [assessmentTargetName]: The user-defined name that identifies the
  /// assessment target that you want to create. The name must be unique within
  /// the AWS account.
  ///
  /// [resourceGroupArn]: The ARN that specifies the resource group that is used
  /// to create the assessment target. If resourceGroupArn is not specified, all
  /// EC2 instances in the current AWS account and region are included in the
  /// assessment target.
  Future<CreateAssessmentTargetResponse> createAssessmentTarget(
      String assessmentTargetName,
      {String resourceGroupArn}) async {
    return CreateAssessmentTargetResponse.fromJson({});
  }

  /// Creates an assessment template for the assessment target that is specified
  /// by the ARN of the assessment target. If the [service-linked
  /// role](https://docs.aws.amazon.com/inspector/latest/userguide/inspector_slr.html)
  /// isn’t already registered, this action also creates and registers a
  /// service-linked role to grant Amazon Inspector access to AWS Services
  /// needed to perform security assessments.
  ///
  /// [assessmentTargetArn]: The ARN that specifies the assessment target for
  /// which you want to create the assessment template.
  ///
  /// [assessmentTemplateName]: The user-defined name that identifies the
  /// assessment template that you want to create. You can create several
  /// assessment templates for an assessment target. The names of the assessment
  /// templates that correspond to a particular assessment target must be
  /// unique.
  ///
  /// [durationInSeconds]: The duration of the assessment run in seconds.
  ///
  /// [rulesPackageArns]: The ARNs that specify the rules packages that you want
  /// to attach to the assessment template.
  ///
  /// [userAttributesForFindings]: The user-defined attributes that are assigned
  /// to every finding that is generated by the assessment run that uses this
  /// assessment template. An attribute is a key and value pair (an Attribute
  /// object). Within an assessment template, each key must be unique.
  Future<CreateAssessmentTemplateResponse> createAssessmentTemplate(
      {@required String assessmentTargetArn,
      @required String assessmentTemplateName,
      @required int durationInSeconds,
      @required List<String> rulesPackageArns,
      List<Attribute> userAttributesForFindings}) async {
    return CreateAssessmentTemplateResponse.fromJson({});
  }

  /// Starts the generation of an exclusions preview for the specified
  /// assessment template. The exclusions preview lists the potential exclusions
  /// (ExclusionPreview) that Inspector can detect before it runs the
  /// assessment.
  ///
  /// [assessmentTemplateArn]: The ARN that specifies the assessment template
  /// for which you want to create an exclusions preview.
  Future<CreateExclusionsPreviewResponse> createExclusionsPreview(
      String assessmentTemplateArn) async {
    return CreateExclusionsPreviewResponse.fromJson({});
  }

  /// Creates a resource group using the specified set of tags (key and value
  /// pairs) that are used to select the EC2 instances to be included in an
  /// Amazon Inspector assessment target. The created resource group is then
  /// used to create an Amazon Inspector assessment target. For more
  /// information, see CreateAssessmentTarget.
  ///
  /// [resourceGroupTags]: A collection of keys and an array of possible values,
  /// '\[{"key":"key1","values":\["Value1","Value2"\]},{"key":"Key2","values":\["Value3"\]}\]'.
  ///
  /// For example,'\[{"key":"Name","values":\["TestEC2Instance"\]}\]'.
  Future<CreateResourceGroupResponse> createResourceGroup(
      List<ResourceGroupTag> resourceGroupTags) async {
    return CreateResourceGroupResponse.fromJson({});
  }

  /// Deletes the assessment run that is specified by the ARN of the assessment
  /// run.
  ///
  /// [assessmentRunArn]: The ARN that specifies the assessment run that you
  /// want to delete.
  Future<void> deleteAssessmentRun(String assessmentRunArn) async {}

  /// Deletes the assessment target that is specified by the ARN of the
  /// assessment target.
  ///
  /// [assessmentTargetArn]: The ARN that specifies the assessment target that
  /// you want to delete.
  Future<void> deleteAssessmentTarget(String assessmentTargetArn) async {}

  /// Deletes the assessment template that is specified by the ARN of the
  /// assessment template.
  ///
  /// [assessmentTemplateArn]: The ARN that specifies the assessment template
  /// that you want to delete.
  Future<void> deleteAssessmentTemplate(String assessmentTemplateArn) async {}

  /// Describes the assessment runs that are specified by the ARNs of the
  /// assessment runs.
  ///
  /// [assessmentRunArns]: The ARN that specifies the assessment run that you
  /// want to describe.
  Future<DescribeAssessmentRunsResponse> describeAssessmentRuns(
      List<String> assessmentRunArns) async {
    return DescribeAssessmentRunsResponse.fromJson({});
  }

  /// Describes the assessment targets that are specified by the ARNs of the
  /// assessment targets.
  ///
  /// [assessmentTargetArns]: The ARNs that specifies the assessment targets
  /// that you want to describe.
  Future<DescribeAssessmentTargetsResponse> describeAssessmentTargets(
      List<String> assessmentTargetArns) async {
    return DescribeAssessmentTargetsResponse.fromJson({});
  }

  /// Describes the assessment templates that are specified by the ARNs of the
  /// assessment templates.
  Future<DescribeAssessmentTemplatesResponse> describeAssessmentTemplates(
      List<String> assessmentTemplateArns) async {
    return DescribeAssessmentTemplatesResponse.fromJson({});
  }

  /// Describes the IAM role that enables Amazon Inspector to access your AWS
  /// account.
  Future<DescribeCrossAccountAccessRoleResponse>
      describeCrossAccountAccessRole() async {
    return DescribeCrossAccountAccessRoleResponse.fromJson({});
  }

  /// Describes the exclusions that are specified by the exclusions' ARNs.
  ///
  /// [exclusionArns]: The list of ARNs that specify the exclusions that you
  /// want to describe.
  ///
  /// [locale]: The locale into which you want to translate the exclusion's
  /// title, description, and recommendation.
  Future<DescribeExclusionsResponse> describeExclusions(
      List<String> exclusionArns,
      {String locale}) async {
    return DescribeExclusionsResponse.fromJson({});
  }

  /// Describes the findings that are specified by the ARNs of the findings.
  ///
  /// [findingArns]: The ARN that specifies the finding that you want to
  /// describe.
  ///
  /// [locale]: The locale into which you want to translate a finding
  /// description, recommendation, and the short description that identifies the
  /// finding.
  Future<DescribeFindingsResponse> describeFindings(List<String> findingArns,
      {String locale}) async {
    return DescribeFindingsResponse.fromJson({});
  }

  /// Describes the resource groups that are specified by the ARNs of the
  /// resource groups.
  ///
  /// [resourceGroupArns]: The ARN that specifies the resource group that you
  /// want to describe.
  Future<DescribeResourceGroupsResponse> describeResourceGroups(
      List<String> resourceGroupArns) async {
    return DescribeResourceGroupsResponse.fromJson({});
  }

  /// Describes the rules packages that are specified by the ARNs of the rules
  /// packages.
  ///
  /// [rulesPackageArns]: The ARN that specifies the rules package that you want
  /// to describe.
  ///
  /// [locale]: The locale that you want to translate a rules package
  /// description into.
  Future<DescribeRulesPackagesResponse> describeRulesPackages(
      List<String> rulesPackageArns,
      {String locale}) async {
    return DescribeRulesPackagesResponse.fromJson({});
  }

  /// Produces an assessment report that includes detailed and comprehensive
  /// results of a specified assessment run.
  ///
  /// [assessmentRunArn]: The ARN that specifies the assessment run for which
  /// you want to generate a report.
  ///
  /// [reportFileFormat]: Specifies the file format (html or pdf) of the
  /// assessment report that you want to generate.
  ///
  /// [reportType]: Specifies the type of the assessment report that you want to
  /// generate. There are two types of assessment reports: a finding report and
  /// a full report. For more information, see [Assessment
  /// Reports](https://docs.aws.amazon.com/inspector/latest/userguide/inspector_reports.html).
  Future<GetAssessmentReportResponse> getAssessmentReport(
      {@required String assessmentRunArn,
      @required String reportFileFormat,
      @required String reportType}) async {
    return GetAssessmentReportResponse.fromJson({});
  }

  /// Retrieves the exclusions preview (a list of ExclusionPreview objects)
  /// specified by the preview token. You can obtain the preview token by
  /// running the CreateExclusionsPreview API.
  ///
  /// [assessmentTemplateArn]: The ARN that specifies the assessment template
  /// for which the exclusions preview was requested.
  ///
  /// [previewToken]: The unique identifier associated of the exclusions
  /// preview.
  ///
  /// [nextToken]: You can use this parameter when paginating results. Set the
  /// value of this parameter to null on your first call to the
  /// GetExclusionsPreviewRequest action. Subsequent calls to the action fill
  /// nextToken in the request with the value of nextToken from the previous
  /// response to continue listing data.
  ///
  /// [maxResults]: You can use this parameter to indicate the maximum number of
  /// items you want in the response. The default value is 100. The maximum
  /// value is 500.
  ///
  /// [locale]: The locale into which you want to translate the exclusion's
  /// title, description, and recommendation.
  Future<GetExclusionsPreviewResponse> getExclusionsPreview(
      {@required String assessmentTemplateArn,
      @required String previewToken,
      String nextToken,
      int maxResults,
      String locale}) async {
    return GetExclusionsPreviewResponse.fromJson({});
  }

  /// Information about the data that is collected for the specified assessment
  /// run.
  ///
  /// [assessmentRunArn]: The ARN that specifies the assessment run that has the
  /// telemetry data that you want to obtain.
  Future<GetTelemetryMetadataResponse> getTelemetryMetadata(
      String assessmentRunArn) async {
    return GetTelemetryMetadataResponse.fromJson({});
  }

  /// Lists the agents of the assessment runs that are specified by the ARNs of
  /// the assessment runs.
  ///
  /// [assessmentRunArn]: The ARN that specifies the assessment run whose agents
  /// you want to list.
  ///
  /// [filter]: You can use this parameter to specify a subset of data to be
  /// included in the action's response.
  ///
  /// For a record to match a filter, all specified filter attributes must
  /// match. When multiple values are specified for a filter attribute, any of
  /// the values can match.
  ///
  /// [nextToken]: You can use this parameter when paginating results. Set the
  /// value of this parameter to null on your first call to the
  /// **ListAssessmentRunAgents** action. Subsequent calls to the action fill
  /// **nextToken** in the request with the value of **NextToken** from the
  /// previous response to continue listing data.
  ///
  /// [maxResults]: You can use this parameter to indicate the maximum number of
  /// items that you want in the response. The default value is 10. The maximum
  /// value is 500.
  Future<ListAssessmentRunAgentsResponse> listAssessmentRunAgents(
      String assessmentRunArn,
      {AgentFilter filter,
      String nextToken,
      int maxResults}) async {
    return ListAssessmentRunAgentsResponse.fromJson({});
  }

  /// Lists the assessment runs that correspond to the assessment templates that
  /// are specified by the ARNs of the assessment templates.
  ///
  /// [assessmentTemplateArns]: The ARNs that specify the assessment templates
  /// whose assessment runs you want to list.
  ///
  /// [filter]: You can use this parameter to specify a subset of data to be
  /// included in the action's response.
  ///
  /// For a record to match a filter, all specified filter attributes must
  /// match. When multiple values are specified for a filter attribute, any of
  /// the values can match.
  ///
  /// [nextToken]: You can use this parameter when paginating results. Set the
  /// value of this parameter to null on your first call to the
  /// **ListAssessmentRuns** action. Subsequent calls to the action fill
  /// **nextToken** in the request with the value of **NextToken** from the
  /// previous response to continue listing data.
  ///
  /// [maxResults]: You can use this parameter to indicate the maximum number of
  /// items that you want in the response. The default value is 10. The maximum
  /// value is 500.
  Future<ListAssessmentRunsResponse> listAssessmentRuns(
      {List<String> assessmentTemplateArns,
      AssessmentRunFilter filter,
      String nextToken,
      int maxResults}) async {
    return ListAssessmentRunsResponse.fromJson({});
  }

  /// Lists the ARNs of the assessment targets within this AWS account. For more
  /// information about assessment targets, see [Amazon Inspector Assessment
  /// Targets](https://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html).
  ///
  /// [filter]: You can use this parameter to specify a subset of data to be
  /// included in the action's response.
  ///
  /// For a record to match a filter, all specified filter attributes must
  /// match. When multiple values are specified for a filter attribute, any of
  /// the values can match.
  ///
  /// [nextToken]: You can use this parameter when paginating results. Set the
  /// value of this parameter to null on your first call to the
  /// **ListAssessmentTargets** action. Subsequent calls to the action fill
  /// **nextToken** in the request with the value of **NextToken** from the
  /// previous response to continue listing data.
  ///
  /// [maxResults]: You can use this parameter to indicate the maximum number of
  /// items you want in the response. The default value is 10. The maximum value
  /// is 500.
  Future<ListAssessmentTargetsResponse> listAssessmentTargets(
      {AssessmentTargetFilter filter, String nextToken, int maxResults}) async {
    return ListAssessmentTargetsResponse.fromJson({});
  }

  /// Lists the assessment templates that correspond to the assessment targets
  /// that are specified by the ARNs of the assessment targets.
  ///
  /// [assessmentTargetArns]: A list of ARNs that specifies the assessment
  /// targets whose assessment templates you want to list.
  ///
  /// [filter]: You can use this parameter to specify a subset of data to be
  /// included in the action's response.
  ///
  /// For a record to match a filter, all specified filter attributes must
  /// match. When multiple values are specified for a filter attribute, any of
  /// the values can match.
  ///
  /// [nextToken]: You can use this parameter when paginating results. Set the
  /// value of this parameter to null on your first call to the
  /// **ListAssessmentTemplates** action. Subsequent calls to the action fill
  /// **nextToken** in the request with the value of **NextToken** from the
  /// previous response to continue listing data.
  ///
  /// [maxResults]: You can use this parameter to indicate the maximum number of
  /// items you want in the response. The default value is 10. The maximum value
  /// is 500.
  Future<ListAssessmentTemplatesResponse> listAssessmentTemplates(
      {List<String> assessmentTargetArns,
      AssessmentTemplateFilter filter,
      String nextToken,
      int maxResults}) async {
    return ListAssessmentTemplatesResponse.fromJson({});
  }

  /// Lists all the event subscriptions for the assessment template that is
  /// specified by the ARN of the assessment template. For more information, see
  /// SubscribeToEvent and UnsubscribeFromEvent.
  ///
  /// [resourceArn]: The ARN of the assessment template for which you want to
  /// list the existing event subscriptions.
  ///
  /// [nextToken]: You can use this parameter when paginating results. Set the
  /// value of this parameter to null on your first call to the
  /// **ListEventSubscriptions** action. Subsequent calls to the action fill
  /// **nextToken** in the request with the value of **NextToken** from the
  /// previous response to continue listing data.
  ///
  /// [maxResults]: You can use this parameter to indicate the maximum number of
  /// items you want in the response. The default value is 10. The maximum value
  /// is 500.
  Future<ListEventSubscriptionsResponse> listEventSubscriptions(
      {String resourceArn, String nextToken, int maxResults}) async {
    return ListEventSubscriptionsResponse.fromJson({});
  }

  /// List exclusions that are generated by the assessment run.
  ///
  /// [assessmentRunArn]: The ARN of the assessment run that generated the
  /// exclusions that you want to list.
  ///
  /// [nextToken]: You can use this parameter when paginating results. Set the
  /// value of this parameter to null on your first call to the
  /// ListExclusionsRequest action. Subsequent calls to the action fill
  /// nextToken in the request with the value of nextToken from the previous
  /// response to continue listing data.
  ///
  /// [maxResults]: You can use this parameter to indicate the maximum number of
  /// items you want in the response. The default value is 100. The maximum
  /// value is 500.
  Future<ListExclusionsResponse> listExclusions(String assessmentRunArn,
      {String nextToken, int maxResults}) async {
    return ListExclusionsResponse.fromJson({});
  }

  /// Lists findings that are generated by the assessment runs that are
  /// specified by the ARNs of the assessment runs.
  ///
  /// [assessmentRunArns]: The ARNs of the assessment runs that generate the
  /// findings that you want to list.
  ///
  /// [filter]: You can use this parameter to specify a subset of data to be
  /// included in the action's response.
  ///
  /// For a record to match a filter, all specified filter attributes must
  /// match. When multiple values are specified for a filter attribute, any of
  /// the values can match.
  ///
  /// [nextToken]: You can use this parameter when paginating results. Set the
  /// value of this parameter to null on your first call to the **ListFindings**
  /// action. Subsequent calls to the action fill **nextToken** in the request
  /// with the value of **NextToken** from the previous response to continue
  /// listing data.
  ///
  /// [maxResults]: You can use this parameter to indicate the maximum number of
  /// items you want in the response. The default value is 10. The maximum value
  /// is 500.
  Future<ListFindingsResponse> listFindings(
      {List<String> assessmentRunArns,
      FindingFilter filter,
      String nextToken,
      int maxResults}) async {
    return ListFindingsResponse.fromJson({});
  }

  /// Lists all available Amazon Inspector rules packages.
  ///
  /// [nextToken]: You can use this parameter when paginating results. Set the
  /// value of this parameter to null on your first call to the
  /// **ListRulesPackages** action. Subsequent calls to the action fill
  /// **nextToken** in the request with the value of **NextToken** from the
  /// previous response to continue listing data.
  ///
  /// [maxResults]: You can use this parameter to indicate the maximum number of
  /// items you want in the response. The default value is 10. The maximum value
  /// is 500.
  Future<ListRulesPackagesResponse> listRulesPackages(
      {String nextToken, int maxResults}) async {
    return ListRulesPackagesResponse.fromJson({});
  }

  /// Lists all tags associated with an assessment template.
  ///
  /// [resourceArn]: The ARN that specifies the assessment template whose tags
  /// you want to list.
  Future<ListTagsForResourceResponse> listTagsForResource(
      String resourceArn) async {
    return ListTagsForResourceResponse.fromJson({});
  }

  /// Previews the agents installed on the EC2 instances that are part of the
  /// specified assessment target.
  ///
  /// [previewAgentsArn]: The ARN of the assessment target whose agents you want
  /// to preview.
  ///
  /// [nextToken]: You can use this parameter when paginating results. Set the
  /// value of this parameter to null on your first call to the
  /// **PreviewAgents** action. Subsequent calls to the action fill
  /// **nextToken** in the request with the value of **NextToken** from the
  /// previous response to continue listing data.
  ///
  /// [maxResults]: You can use this parameter to indicate the maximum number of
  /// items you want in the response. The default value is 10. The maximum value
  /// is 500.
  Future<PreviewAgentsResponse> previewAgents(String previewAgentsArn,
      {String nextToken, int maxResults}) async {
    return PreviewAgentsResponse.fromJson({});
  }

  /// Registers the IAM role that grants Amazon Inspector access to AWS Services
  /// needed to perform security assessments.
  ///
  /// [roleArn]: The ARN of the IAM role that grants Amazon Inspector access to
  /// AWS Services needed to perform security assessments.
  Future<void> registerCrossAccountAccessRole(String roleArn) async {}

  /// Removes entire attributes (key and value pairs) from the findings that are
  /// specified by the ARNs of the findings where an attribute with the
  /// specified key exists.
  ///
  /// [findingArns]: The ARNs that specify the findings that you want to remove
  /// attributes from.
  ///
  /// [attributeKeys]: The array of attribute keys that you want to remove from
  /// specified findings.
  Future<RemoveAttributesFromFindingsResponse> removeAttributesFromFindings(
      {@required List<String> findingArns,
      @required List<String> attributeKeys}) async {
    return RemoveAttributesFromFindingsResponse.fromJson({});
  }

  /// Sets tags (key and value pairs) to the assessment template that is
  /// specified by the ARN of the assessment template.
  ///
  /// [resourceArn]: The ARN of the assessment template that you want to set
  /// tags to.
  ///
  /// [tags]: A collection of key and value pairs that you want to set to the
  /// assessment template.
  Future<void> setTagsForResource(String resourceArn, {List<Tag> tags}) async {}

  /// Starts the assessment run specified by the ARN of the assessment template.
  /// For this API to function properly, you must not exceed the limit of
  /// running up to 500 concurrent agents per AWS account.
  ///
  /// [assessmentTemplateArn]: The ARN of the assessment template of the
  /// assessment run that you want to start.
  ///
  /// [assessmentRunName]: You can specify the name for the assessment run. The
  /// name must be unique for the assessment template whose ARN is used to start
  /// the assessment run.
  Future<StartAssessmentRunResponse> startAssessmentRun(
      String assessmentTemplateArn,
      {String assessmentRunName}) async {
    return StartAssessmentRunResponse.fromJson({});
  }

  /// Stops the assessment run that is specified by the ARN of the assessment
  /// run.
  ///
  /// [assessmentRunArn]: The ARN of the assessment run that you want to stop.
  ///
  /// [stopAction]: An input option that can be set to either START\_EVALUATION
  /// or SKIP\_EVALUATION. START\_EVALUATION (the default value), stops the AWS
  /// agent from collecting data and begins the results evaluation and the
  /// findings generation process. SKIP\_EVALUATION cancels the assessment run
  /// immediately, after which no findings are generated.
  Future<void> stopAssessmentRun(String assessmentRunArn,
      {String stopAction}) async {}

  /// Enables the process of sending Amazon Simple Notification Service (SNS)
  /// notifications about a specified event to a specified SNS topic.
  ///
  /// [resourceArn]: The ARN of the assessment template that is used during the
  /// event for which you want to receive SNS notifications.
  ///
  /// [event]: The event for which you want to receive SNS notifications.
  ///
  /// [topicArn]: The ARN of the SNS topic to which the SNS notifications are
  /// sent.
  Future<void> subscribeToEvent(
      {@required String resourceArn,
      @required String event,
      @required String topicArn}) async {}

  /// Disables the process of sending Amazon Simple Notification Service (SNS)
  /// notifications about a specified event to a specified SNS topic.
  ///
  /// [resourceArn]: The ARN of the assessment template that is used during the
  /// event for which you want to stop receiving SNS notifications.
  ///
  /// [event]: The event for which you want to stop receiving SNS notifications.
  ///
  /// [topicArn]: The ARN of the SNS topic to which SNS notifications are sent.
  Future<void> unsubscribeFromEvent(
      {@required String resourceArn,
      @required String event,
      @required String topicArn}) async {}

  /// Updates the assessment target that is specified by the ARN of the
  /// assessment target.
  ///
  /// If resourceGroupArn is not specified, all EC2 instances in the current AWS
  /// account and region are included in the assessment target.
  ///
  /// [assessmentTargetArn]: The ARN of the assessment target that you want to
  /// update.
  ///
  /// [assessmentTargetName]: The name of the assessment target that you want to
  /// update.
  ///
  /// [resourceGroupArn]: The ARN of the resource group that is used to specify
  /// the new resource group to associate with the assessment target.
  Future<void> updateAssessmentTarget(
      {@required String assessmentTargetArn,
      @required String assessmentTargetName,
      String resourceGroupArn}) async {}
}

class AddAttributesToFindingsResponse {
  /// Attribute details that cannot be described. An error code is provided for
  /// each failed item.
  final Map<String, FailedItemDetails> failedItems;

  AddAttributesToFindingsResponse({
    @required this.failedItems,
  });
  static AddAttributesToFindingsResponse fromJson(Map<String, dynamic> json) =>
      AddAttributesToFindingsResponse();
}

class AgentFilter {
  /// The current health state of the agent. Values can be set to **HEALTHY** or
  /// **UNHEALTHY**.
  final List<String> agentHealths;

  /// The detailed health state of the agent. Values can be set to **IDLE**,
  /// **RUNNING**, **SHUTDOWN**, **UNHEALTHY**, **THROTTLED**, and **UNKNOWN**.
  final List<String> agentHealthCodes;

  AgentFilter({
    @required this.agentHealths,
    @required this.agentHealthCodes,
  });
}

class AgentPreview {
  /// The hostname of the EC2 instance on which the Amazon Inspector Agent is
  /// installed.
  final String hostname;

  /// The ID of the EC2 instance where the agent is installed.
  final String agentId;

  /// The Auto Scaling group for the EC2 instance where the agent is installed.
  final String autoScalingGroup;

  /// The health status of the Amazon Inspector Agent.
  final String agentHealth;

  /// The version of the Amazon Inspector Agent.
  final String agentVersion;

  /// The operating system running on the EC2 instance on which the Amazon
  /// Inspector Agent is installed.
  final String operatingSystem;

  /// The kernel version of the operating system running on the EC2 instance on
  /// which the Amazon Inspector Agent is installed.
  final String kernelVersion;

  /// The IP address of the EC2 instance on which the Amazon Inspector Agent is
  /// installed.
  final String ipv4Address;

  AgentPreview({
    this.hostname,
    @required this.agentId,
    this.autoScalingGroup,
    this.agentHealth,
    this.agentVersion,
    this.operatingSystem,
    this.kernelVersion,
    this.ipv4Address,
  });
  static AgentPreview fromJson(Map<String, dynamic> json) => AgentPreview();
}

class AssessmentRun {
  /// The ARN of the assessment run.
  final String arn;

  /// The auto-generated name for the assessment run.
  final String name;

  /// The ARN of the assessment template that is associated with the assessment
  /// run.
  final String assessmentTemplateArn;

  /// The state of the assessment run.
  final String state;

  /// The duration of the assessment run.
  final int durationInSeconds;

  /// The rules packages selected for the assessment run.
  final List<String> rulesPackageArns;

  /// The user-defined attributes that are assigned to every generated finding.
  final List<Attribute> userAttributesForFindings;

  /// The time when StartAssessmentRun was called.
  final DateTime createdAt;

  /// The time when StartAssessmentRun was called.
  final DateTime startedAt;

  /// The assessment run completion time that corresponds to the rules packages
  /// evaluation completion time or failure.
  final DateTime completedAt;

  /// The last time when the assessment run's state changed.
  final DateTime stateChangedAt;

  /// A Boolean value (true or false) that specifies whether the process of
  /// collecting data from the agents is completed.
  final bool dataCollected;

  /// A list of the assessment run state changes.
  final List<AssessmentRunStateChange> stateChanges;

  /// A list of notifications for the event subscriptions. A notification about
  /// a particular generated finding is added to this list only once.
  final List<AssessmentRunNotification> notifications;

  /// Provides a total count of generated findings per severity.
  final Map<String, int> findingCounts;

  AssessmentRun({
    @required this.arn,
    @required this.name,
    @required this.assessmentTemplateArn,
    @required this.state,
    @required this.durationInSeconds,
    @required this.rulesPackageArns,
    @required this.userAttributesForFindings,
    @required this.createdAt,
    this.startedAt,
    this.completedAt,
    @required this.stateChangedAt,
    @required this.dataCollected,
    @required this.stateChanges,
    @required this.notifications,
    @required this.findingCounts,
  });
  static AssessmentRun fromJson(Map<String, dynamic> json) => AssessmentRun();
}

class AssessmentRunAgent {
  /// The AWS account of the EC2 instance where the agent is installed.
  final String agentId;

  /// The ARN of the assessment run that is associated with the agent.
  final String assessmentRunArn;

  /// The current health state of the agent.
  final String agentHealth;

  /// The detailed health state of the agent.
  final String agentHealthCode;

  /// The description for the agent health code.
  final String agentHealthDetails;

  /// The Auto Scaling group of the EC2 instance that is specified by the agent
  /// ID.
  final String autoScalingGroup;

  /// The Amazon Inspector application data metrics that are collected by the
  /// agent.
  final List<TelemetryMetadata> telemetryMetadata;

  AssessmentRunAgent({
    @required this.agentId,
    @required this.assessmentRunArn,
    @required this.agentHealth,
    @required this.agentHealthCode,
    this.agentHealthDetails,
    this.autoScalingGroup,
    @required this.telemetryMetadata,
  });
  static AssessmentRunAgent fromJson(Map<String, dynamic> json) =>
      AssessmentRunAgent();
}

class AssessmentRunFilter {
  /// For a record to match a filter, an explicit value or a string containing a
  /// wildcard that is specified for this data type property must match the
  /// value of the **assessmentRunName** property of the AssessmentRun data
  /// type.
  final String namePattern;

  /// For a record to match a filter, one of the values specified for this data
  /// type property must be the exact match of the value of the
  /// **assessmentRunState** property of the AssessmentRun data type.
  final List<String> states;

  /// For a record to match a filter, the value that is specified for this data
  /// type property must inclusively match any value between the specified
  /// minimum and maximum values of the **durationInSeconds** property of the
  /// AssessmentRun data type.
  final DurationRange durationRange;

  /// For a record to match a filter, the value that is specified for this data
  /// type property must be contained in the list of values of the
  /// **rulesPackages** property of the AssessmentRun data type.
  final List<String> rulesPackageArns;

  /// For a record to match a filter, the value that is specified for this data
  /// type property must inclusively match any value between the specified
  /// minimum and maximum values of the **startTime** property of the
  /// AssessmentRun data type.
  final TimestampRange startTimeRange;

  /// For a record to match a filter, the value that is specified for this data
  /// type property must inclusively match any value between the specified
  /// minimum and maximum values of the **completedAt** property of the
  /// AssessmentRun data type.
  final TimestampRange completionTimeRange;

  /// For a record to match a filter, the value that is specified for this data
  /// type property must match the **stateChangedAt** property of the
  /// AssessmentRun data type.
  final TimestampRange stateChangeTimeRange;

  AssessmentRunFilter({
    this.namePattern,
    this.states,
    this.durationRange,
    this.rulesPackageArns,
    this.startTimeRange,
    this.completionTimeRange,
    this.stateChangeTimeRange,
  });
}

class AssessmentRunNotification {
  /// The date of the notification.
  final DateTime date;

  /// The event for which a notification is sent.
  final String event;

  /// The message included in the notification.
  final String message;

  /// The Boolean value that specifies whether the notification represents an
  /// error.
  final bool error;

  /// The SNS topic to which the SNS notification is sent.
  final String snsTopicArn;

  /// The status code of the SNS notification.
  final String snsPublishStatusCode;

  AssessmentRunNotification({
    @required this.date,
    @required this.event,
    this.message,
    @required this.error,
    this.snsTopicArn,
    this.snsPublishStatusCode,
  });
  static AssessmentRunNotification fromJson(Map<String, dynamic> json) =>
      AssessmentRunNotification();
}

class AssessmentRunStateChange {
  /// The last time the assessment run state changed.
  final DateTime stateChangedAt;

  /// The assessment run state.
  final String state;

  AssessmentRunStateChange({
    @required this.stateChangedAt,
    @required this.state,
  });
  static AssessmentRunStateChange fromJson(Map<String, dynamic> json) =>
      AssessmentRunStateChange();
}

class AssessmentTarget {
  /// The ARN that specifies the Amazon Inspector assessment target.
  final String arn;

  /// The name of the Amazon Inspector assessment target.
  final String name;

  /// The ARN that specifies the resource group that is associated with the
  /// assessment target.
  final String resourceGroupArn;

  /// The time at which the assessment target is created.
  final DateTime createdAt;

  /// The time at which UpdateAssessmentTarget is called.
  final DateTime updatedAt;

  AssessmentTarget({
    @required this.arn,
    @required this.name,
    this.resourceGroupArn,
    @required this.createdAt,
    @required this.updatedAt,
  });
  static AssessmentTarget fromJson(Map<String, dynamic> json) =>
      AssessmentTarget();
}

class AssessmentTargetFilter {
  /// For a record to match a filter, an explicit value or a string that
  /// contains a wildcard that is specified for this data type property must
  /// match the value of the **assessmentTargetName** property of the
  /// AssessmentTarget data type.
  final String assessmentTargetNamePattern;

  AssessmentTargetFilter({
    this.assessmentTargetNamePattern,
  });
}

class AssessmentTemplate {
  /// The ARN of the assessment template.
  final String arn;

  /// The name of the assessment template.
  final String name;

  /// The ARN of the assessment target that corresponds to this assessment
  /// template.
  final String assessmentTargetArn;

  /// The duration in seconds specified for this assessment template. The
  /// default value is 3600 seconds (one hour). The maximum value is 86400
  /// seconds (one day).
  final int durationInSeconds;

  /// The rules packages that are specified for this assessment template.
  final List<String> rulesPackageArns;

  /// The user-defined attributes that are assigned to every generated finding
  /// from the assessment run that uses this assessment template.
  final List<Attribute> userAttributesForFindings;

  /// The Amazon Resource Name (ARN) of the most recent assessment run
  /// associated with this assessment template. This value exists only when the
  /// value of assessmentRunCount is greaterpa than zero.
  final String lastAssessmentRunArn;

  /// The number of existing assessment runs associated with this assessment
  /// template. This value can be zero or a positive integer.
  final int assessmentRunCount;

  /// The time at which the assessment template is created.
  final DateTime createdAt;

  AssessmentTemplate({
    @required this.arn,
    @required this.name,
    @required this.assessmentTargetArn,
    @required this.durationInSeconds,
    @required this.rulesPackageArns,
    @required this.userAttributesForFindings,
    this.lastAssessmentRunArn,
    @required this.assessmentRunCount,
    @required this.createdAt,
  });
  static AssessmentTemplate fromJson(Map<String, dynamic> json) =>
      AssessmentTemplate();
}

class AssessmentTemplateFilter {
  /// For a record to match a filter, an explicit value or a string that
  /// contains a wildcard that is specified for this data type property must
  /// match the value of the **assessmentTemplateName** property of the
  /// AssessmentTemplate data type.
  final String namePattern;

  /// For a record to match a filter, the value specified for this data type
  /// property must inclusively match any value between the specified minimum
  /// and maximum values of the **durationInSeconds** property of the
  /// AssessmentTemplate data type.
  final DurationRange durationRange;

  /// For a record to match a filter, the values that are specified for this
  /// data type property must be contained in the list of values of the
  /// **rulesPackageArns** property of the AssessmentTemplate data type.
  final List<String> rulesPackageArns;

  AssessmentTemplateFilter({
    this.namePattern,
    this.durationRange,
    this.rulesPackageArns,
  });
}

class AssetAttributes {
  /// The schema version of this data type.
  final int schemaVersion;

  /// The ID of the agent that is installed on the EC2 instance where the
  /// finding is generated.
  final String agentId;

  /// The Auto Scaling group of the EC2 instance where the finding is generated.
  final String autoScalingGroup;

  /// The ID of the Amazon Machine Image (AMI) that is installed on the EC2
  /// instance where the finding is generated.
  final String amiId;

  /// The hostname of the EC2 instance where the finding is generated.
  final String hostname;

  /// The list of IP v4 addresses of the EC2 instance where the finding is
  /// generated.
  final List<String> ipv4Addresses;

  /// The tags related to the EC2 instance where the finding is generated.
  final List<Tag> tags;

  /// An array of the network interfaces interacting with the EC2 instance where
  /// the finding is generated.
  final List<NetworkInterface> networkInterfaces;

  AssetAttributes({
    @required this.schemaVersion,
    this.agentId,
    this.autoScalingGroup,
    this.amiId,
    this.hostname,
    this.ipv4Addresses,
    this.tags,
    this.networkInterfaces,
  });
  static AssetAttributes fromJson(Map<String, dynamic> json) =>
      AssetAttributes();
}

class Attribute {
  /// The attribute key.
  final String key;

  /// The value assigned to the attribute key.
  final String value;

  Attribute({
    @required this.key,
    this.value,
  });
  static Attribute fromJson(Map<String, dynamic> json) => Attribute();
}

class CreateAssessmentTargetResponse {
  /// The ARN that specifies the assessment target that is created.
  final String assessmentTargetArn;

  CreateAssessmentTargetResponse({
    @required this.assessmentTargetArn,
  });
  static CreateAssessmentTargetResponse fromJson(Map<String, dynamic> json) =>
      CreateAssessmentTargetResponse();
}

class CreateAssessmentTemplateResponse {
  /// The ARN that specifies the assessment template that is created.
  final String assessmentTemplateArn;

  CreateAssessmentTemplateResponse({
    @required this.assessmentTemplateArn,
  });
  static CreateAssessmentTemplateResponse fromJson(Map<String, dynamic> json) =>
      CreateAssessmentTemplateResponse();
}

class CreateExclusionsPreviewResponse {
  /// Specifies the unique identifier of the requested exclusions preview. You
  /// can use the unique identifier to retrieve the exclusions preview when
  /// running the GetExclusionsPreview API.
  final String previewToken;

  CreateExclusionsPreviewResponse({
    @required this.previewToken,
  });
  static CreateExclusionsPreviewResponse fromJson(Map<String, dynamic> json) =>
      CreateExclusionsPreviewResponse();
}

class CreateResourceGroupResponse {
  /// The ARN that specifies the resource group that is created.
  final String resourceGroupArn;

  CreateResourceGroupResponse({
    @required this.resourceGroupArn,
  });
  static CreateResourceGroupResponse fromJson(Map<String, dynamic> json) =>
      CreateResourceGroupResponse();
}

class DescribeAssessmentRunsResponse {
  /// Information about the assessment run.
  final List<AssessmentRun> assessmentRuns;

  /// Assessment run details that cannot be described. An error code is provided
  /// for each failed item.
  final Map<String, FailedItemDetails> failedItems;

  DescribeAssessmentRunsResponse({
    @required this.assessmentRuns,
    @required this.failedItems,
  });
  static DescribeAssessmentRunsResponse fromJson(Map<String, dynamic> json) =>
      DescribeAssessmentRunsResponse();
}

class DescribeAssessmentTargetsResponse {
  /// Information about the assessment targets.
  final List<AssessmentTarget> assessmentTargets;

  /// Assessment target details that cannot be described. An error code is
  /// provided for each failed item.
  final Map<String, FailedItemDetails> failedItems;

  DescribeAssessmentTargetsResponse({
    @required this.assessmentTargets,
    @required this.failedItems,
  });
  static DescribeAssessmentTargetsResponse fromJson(
          Map<String, dynamic> json) =>
      DescribeAssessmentTargetsResponse();
}

class DescribeAssessmentTemplatesResponse {
  /// Information about the assessment templates.
  final List<AssessmentTemplate> assessmentTemplates;

  /// Assessment template details that cannot be described. An error code is
  /// provided for each failed item.
  final Map<String, FailedItemDetails> failedItems;

  DescribeAssessmentTemplatesResponse({
    @required this.assessmentTemplates,
    @required this.failedItems,
  });
  static DescribeAssessmentTemplatesResponse fromJson(
          Map<String, dynamic> json) =>
      DescribeAssessmentTemplatesResponse();
}

class DescribeCrossAccountAccessRoleResponse {
  /// The ARN that specifies the IAM role that Amazon Inspector uses to access
  /// your AWS account.
  final String roleArn;

  /// A Boolean value that specifies whether the IAM role has the necessary
  /// policies attached to enable Amazon Inspector to access your AWS account.
  final bool valid;

  /// The date when the cross-account access role was registered.
  final DateTime registeredAt;

  DescribeCrossAccountAccessRoleResponse({
    @required this.roleArn,
    @required this.valid,
    @required this.registeredAt,
  });
  static DescribeCrossAccountAccessRoleResponse fromJson(
          Map<String, dynamic> json) =>
      DescribeCrossAccountAccessRoleResponse();
}

class DescribeExclusionsResponse {
  /// Information about the exclusions.
  final Map<String, Exclusion> exclusions;

  /// Exclusion details that cannot be described. An error code is provided for
  /// each failed item.
  final Map<String, FailedItemDetails> failedItems;

  DescribeExclusionsResponse({
    @required this.exclusions,
    @required this.failedItems,
  });
  static DescribeExclusionsResponse fromJson(Map<String, dynamic> json) =>
      DescribeExclusionsResponse();
}

class DescribeFindingsResponse {
  /// Information about the finding.
  final List<Finding> findings;

  /// Finding details that cannot be described. An error code is provided for
  /// each failed item.
  final Map<String, FailedItemDetails> failedItems;

  DescribeFindingsResponse({
    @required this.findings,
    @required this.failedItems,
  });
  static DescribeFindingsResponse fromJson(Map<String, dynamic> json) =>
      DescribeFindingsResponse();
}

class DescribeResourceGroupsResponse {
  /// Information about a resource group.
  final List<ResourceGroup> resourceGroups;

  /// Resource group details that cannot be described. An error code is provided
  /// for each failed item.
  final Map<String, FailedItemDetails> failedItems;

  DescribeResourceGroupsResponse({
    @required this.resourceGroups,
    @required this.failedItems,
  });
  static DescribeResourceGroupsResponse fromJson(Map<String, dynamic> json) =>
      DescribeResourceGroupsResponse();
}

class DescribeRulesPackagesResponse {
  /// Information about the rules package.
  final List<RulesPackage> rulesPackages;

  /// Rules package details that cannot be described. An error code is provided
  /// for each failed item.
  final Map<String, FailedItemDetails> failedItems;

  DescribeRulesPackagesResponse({
    @required this.rulesPackages,
    @required this.failedItems,
  });
  static DescribeRulesPackagesResponse fromJson(Map<String, dynamic> json) =>
      DescribeRulesPackagesResponse();
}

class DurationRange {
  /// The minimum value of the duration range. Must be greater than zero.
  final int minSeconds;

  /// The maximum value of the duration range. Must be less than or equal to
  /// 604800 seconds (1 week).
  final int maxSeconds;

  DurationRange({
    this.minSeconds,
    this.maxSeconds,
  });
}

class EventSubscription {
  /// The event for which Amazon Simple Notification Service (SNS) notifications
  /// are sent.
  final String event;

  /// The time at which SubscribeToEvent is called.
  final DateTime subscribedAt;

  EventSubscription({
    @required this.event,
    @required this.subscribedAt,
  });
  static EventSubscription fromJson(Map<String, dynamic> json) =>
      EventSubscription();
}

class Exclusion {
  /// The ARN that specifies the exclusion.
  final String arn;

  /// The name of the exclusion.
  final String title;

  /// The description of the exclusion.
  final String description;

  /// The recommendation for the exclusion.
  final String recommendation;

  /// The AWS resources for which the exclusion pertains.
  final List<Scope> scopes;

  /// The system-defined attributes for the exclusion.
  final List<Attribute> attributes;

  Exclusion({
    @required this.arn,
    @required this.title,
    @required this.description,
    @required this.recommendation,
    @required this.scopes,
    this.attributes,
  });
  static Exclusion fromJson(Map<String, dynamic> json) => Exclusion();
}

class ExclusionPreview {
  /// The name of the exclusion preview.
  final String title;

  /// The description of the exclusion preview.
  final String description;

  /// The recommendation for the exclusion preview.
  final String recommendation;

  /// The AWS resources for which the exclusion preview pertains.
  final List<Scope> scopes;

  /// The system-defined attributes for the exclusion preview.
  final List<Attribute> attributes;

  ExclusionPreview({
    @required this.title,
    @required this.description,
    @required this.recommendation,
    @required this.scopes,
    this.attributes,
  });
  static ExclusionPreview fromJson(Map<String, dynamic> json) =>
      ExclusionPreview();
}

class FailedItemDetails {
  /// The status code of a failed item.
  final String failureCode;

  /// Indicates whether you can immediately retry a request for this item for a
  /// specified resource.
  final bool retryable;

  FailedItemDetails({
    @required this.failureCode,
    @required this.retryable,
  });
  static FailedItemDetails fromJson(Map<String, dynamic> json) =>
      FailedItemDetails();
}

class Finding {
  /// The ARN that specifies the finding.
  final String arn;

  /// The schema version of this data type.
  final int schemaVersion;

  /// The data element is set to "Inspector".
  final String service;

  /// This data type is used in the Finding data type.
  final InspectorServiceAttributes serviceAttributes;

  /// The type of the host from which the finding is generated.
  final String assetType;

  /// A collection of attributes of the host from which the finding is
  /// generated.
  final AssetAttributes assetAttributes;

  /// The ID of the finding.
  final String id;

  /// The name of the finding.
  final String title;

  /// The description of the finding.
  final String description;

  /// The recommendation for the finding.
  final String recommendation;

  /// The finding severity. Values can be set to High, Medium, Low, and
  /// Informational.
  final String severity;

  /// The numeric value of the finding severity.
  final double numericSeverity;

  /// This data element is currently not used.
  final int confidence;

  /// This data element is currently not used.
  final bool indicatorOfCompromise;

  /// The system-defined attributes for the finding.
  final List<Attribute> attributes;

  /// The user-defined attributes that are assigned to the finding.
  final List<Attribute> userAttributes;

  /// The time when the finding was generated.
  final DateTime createdAt;

  /// The time when AddAttributesToFindings is called.
  final DateTime updatedAt;

  Finding({
    @required this.arn,
    this.schemaVersion,
    this.service,
    this.serviceAttributes,
    this.assetType,
    this.assetAttributes,
    this.id,
    this.title,
    this.description,
    this.recommendation,
    this.severity,
    this.numericSeverity,
    this.confidence,
    this.indicatorOfCompromise,
    @required this.attributes,
    @required this.userAttributes,
    @required this.createdAt,
    @required this.updatedAt,
  });
  static Finding fromJson(Map<String, dynamic> json) => Finding();
}

class FindingFilter {
  /// For a record to match a filter, one of the values that is specified for
  /// this data type property must be the exact match of the value of the
  /// **agentId** property of the Finding data type.
  final List<String> agentIds;

  /// For a record to match a filter, one of the values that is specified for
  /// this data type property must be the exact match of the value of the
  /// **autoScalingGroup** property of the Finding data type.
  final List<String> autoScalingGroups;

  /// For a record to match a filter, one of the values that is specified for
  /// this data type property must be the exact match of the value of the
  /// **ruleName** property of the Finding data type.
  final List<String> ruleNames;

  /// For a record to match a filter, one of the values that is specified for
  /// this data type property must be the exact match of the value of the
  /// **severity** property of the Finding data type.
  final List<String> severities;

  /// For a record to match a filter, one of the values that is specified for
  /// this data type property must be the exact match of the value of the
  /// **rulesPackageArn** property of the Finding data type.
  final List<String> rulesPackageArns;

  /// For a record to match a filter, the list of values that are specified for
  /// this data type property must be contained in the list of values of the
  /// **attributes** property of the Finding data type.
  final List<Attribute> attributes;

  /// For a record to match a filter, the value that is specified for this data
  /// type property must be contained in the list of values of the
  /// **userAttributes** property of the Finding data type.
  final List<Attribute> userAttributes;

  /// The time range during which the finding is generated.
  final TimestampRange creationTimeRange;

  FindingFilter({
    this.agentIds,
    this.autoScalingGroups,
    this.ruleNames,
    this.severities,
    this.rulesPackageArns,
    this.attributes,
    this.userAttributes,
    this.creationTimeRange,
  });
}

class GetAssessmentReportResponse {
  /// Specifies the status of the request to generate an assessment report.
  final String status;

  /// Specifies the URL where you can find the generated assessment report. This
  /// parameter is only returned if the report is successfully generated.
  final String url;

  GetAssessmentReportResponse({
    @required this.status,
    this.url,
  });
  static GetAssessmentReportResponse fromJson(Map<String, dynamic> json) =>
      GetAssessmentReportResponse();
}

class GetExclusionsPreviewResponse {
  /// Specifies the status of the request to generate an exclusions preview.
  final String previewStatus;

  /// Information about the exclusions included in the preview.
  final List<ExclusionPreview> exclusionPreviews;

  /// When a response is generated, if there is more data to be listed, this
  /// parameters is present in the response and contains the value to use for
  /// the nextToken parameter in a subsequent pagination request. If there is no
  /// more data to be listed, this parameter is set to null.
  final String nextToken;

  GetExclusionsPreviewResponse({
    @required this.previewStatus,
    this.exclusionPreviews,
    this.nextToken,
  });
  static GetExclusionsPreviewResponse fromJson(Map<String, dynamic> json) =>
      GetExclusionsPreviewResponse();
}

class GetTelemetryMetadataResponse {
  /// Telemetry details.
  final List<TelemetryMetadata> telemetryMetadata;

  GetTelemetryMetadataResponse({
    @required this.telemetryMetadata,
  });
  static GetTelemetryMetadataResponse fromJson(Map<String, dynamic> json) =>
      GetTelemetryMetadataResponse();
}

class InspectorServiceAttributes {
  /// The schema version of this data type.
  final int schemaVersion;

  /// The ARN of the assessment run during which the finding is generated.
  final String assessmentRunArn;

  /// The ARN of the rules package that is used to generate the finding.
  final String rulesPackageArn;

  InspectorServiceAttributes({
    @required this.schemaVersion,
    this.assessmentRunArn,
    this.rulesPackageArn,
  });
  static InspectorServiceAttributes fromJson(Map<String, dynamic> json) =>
      InspectorServiceAttributes();
}

class ListAssessmentRunAgentsResponse {
  /// A list of ARNs that specifies the agents returned by the action.
  final List<AssessmentRunAgent> assessmentRunAgents;

  ///  When a response is generated, if there is more data to be listed, this
  /// parameter is present in the response and contains the value to use for the
  /// **nextToken** parameter in a subsequent pagination request. If there is no
  /// more data to be listed, this parameter is set to null.
  final String nextToken;

  ListAssessmentRunAgentsResponse({
    @required this.assessmentRunAgents,
    this.nextToken,
  });
  static ListAssessmentRunAgentsResponse fromJson(Map<String, dynamic> json) =>
      ListAssessmentRunAgentsResponse();
}

class ListAssessmentRunsResponse {
  /// A list of ARNs that specifies the assessment runs that are returned by the
  /// action.
  final List<String> assessmentRunArns;

  ///  When a response is generated, if there is more data to be listed, this
  /// parameter is present in the response and contains the value to use for the
  /// **nextToken** parameter in a subsequent pagination request. If there is no
  /// more data to be listed, this parameter is set to null.
  final String nextToken;

  ListAssessmentRunsResponse({
    @required this.assessmentRunArns,
    this.nextToken,
  });
  static ListAssessmentRunsResponse fromJson(Map<String, dynamic> json) =>
      ListAssessmentRunsResponse();
}

class ListAssessmentTargetsResponse {
  /// A list of ARNs that specifies the assessment targets that are returned by
  /// the action.
  final List<String> assessmentTargetArns;

  ///  When a response is generated, if there is more data to be listed, this
  /// parameter is present in the response and contains the value to use for the
  /// **nextToken** parameter in a subsequent pagination request. If there is no
  /// more data to be listed, this parameter is set to null.
  final String nextToken;

  ListAssessmentTargetsResponse({
    @required this.assessmentTargetArns,
    this.nextToken,
  });
  static ListAssessmentTargetsResponse fromJson(Map<String, dynamic> json) =>
      ListAssessmentTargetsResponse();
}

class ListAssessmentTemplatesResponse {
  /// A list of ARNs that specifies the assessment templates returned by the
  /// action.
  final List<String> assessmentTemplateArns;

  ///  When a response is generated, if there is more data to be listed, this
  /// parameter is present in the response and contains the value to use for the
  /// **nextToken** parameter in a subsequent pagination request. If there is no
  /// more data to be listed, this parameter is set to null.
  final String nextToken;

  ListAssessmentTemplatesResponse({
    @required this.assessmentTemplateArns,
    this.nextToken,
  });
  static ListAssessmentTemplatesResponse fromJson(Map<String, dynamic> json) =>
      ListAssessmentTemplatesResponse();
}

class ListEventSubscriptionsResponse {
  /// Details of the returned event subscriptions.
  final List<Subscription> subscriptions;

  ///  When a response is generated, if there is more data to be listed, this
  /// parameter is present in the response and contains the value to use for the
  /// **nextToken** parameter in a subsequent pagination request. If there is no
  /// more data to be listed, this parameter is set to null.
  final String nextToken;

  ListEventSubscriptionsResponse({
    @required this.subscriptions,
    this.nextToken,
  });
  static ListEventSubscriptionsResponse fromJson(Map<String, dynamic> json) =>
      ListEventSubscriptionsResponse();
}

class ListExclusionsResponse {
  /// A list of exclusions' ARNs returned by the action.
  final List<String> exclusionArns;

  /// When a response is generated, if there is more data to be listed, this
  /// parameters is present in the response and contains the value to use for
  /// the nextToken parameter in a subsequent pagination request. If there is no
  /// more data to be listed, this parameter is set to null.
  final String nextToken;

  ListExclusionsResponse({
    @required this.exclusionArns,
    this.nextToken,
  });
  static ListExclusionsResponse fromJson(Map<String, dynamic> json) =>
      ListExclusionsResponse();
}

class ListFindingsResponse {
  /// A list of ARNs that specifies the findings returned by the action.
  final List<String> findingArns;

  ///  When a response is generated, if there is more data to be listed, this
  /// parameter is present in the response and contains the value to use for the
  /// **nextToken** parameter in a subsequent pagination request. If there is no
  /// more data to be listed, this parameter is set to null.
  final String nextToken;

  ListFindingsResponse({
    @required this.findingArns,
    this.nextToken,
  });
  static ListFindingsResponse fromJson(Map<String, dynamic> json) =>
      ListFindingsResponse();
}

class ListRulesPackagesResponse {
  /// The list of ARNs that specifies the rules packages returned by the action.
  final List<String> rulesPackageArns;

  ///  When a response is generated, if there is more data to be listed, this
  /// parameter is present in the response and contains the value to use for the
  /// **nextToken** parameter in a subsequent pagination request. If there is no
  /// more data to be listed, this parameter is set to null.
  final String nextToken;

  ListRulesPackagesResponse({
    @required this.rulesPackageArns,
    this.nextToken,
  });
  static ListRulesPackagesResponse fromJson(Map<String, dynamic> json) =>
      ListRulesPackagesResponse();
}

class ListTagsForResourceResponse {
  /// A collection of key and value pairs.
  final List<Tag> tags;

  ListTagsForResourceResponse({
    @required this.tags,
  });
  static ListTagsForResourceResponse fromJson(Map<String, dynamic> json) =>
      ListTagsForResourceResponse();
}

class NetworkInterface {
  /// The ID of the network interface.
  final String networkInterfaceId;

  /// The ID of a subnet associated with the network interface.
  final String subnetId;

  /// The ID of a VPC associated with the network interface.
  final String vpcId;

  /// The name of a private DNS associated with the network interface.
  final String privateDnsName;

  /// The private IP address associated with the network interface.
  final String privateIpAddress;

  /// A list of the private IP addresses associated with the network interface.
  /// Includes the privateDnsName and privateIpAddress.
  final List<PrivateIp> privateIpAddresses;

  /// The name of a public DNS associated with the network interface.
  final String publicDnsName;

  /// The public IP address from which the network interface is reachable.
  final String publicIp;

  /// The IP addresses associated with the network interface.
  final List<String> ipv6Addresses;

  /// A list of the security groups associated with the network interface.
  /// Includes the groupId and groupName.
  final List<SecurityGroup> securityGroups;

  NetworkInterface({
    this.networkInterfaceId,
    this.subnetId,
    this.vpcId,
    this.privateDnsName,
    this.privateIpAddress,
    this.privateIpAddresses,
    this.publicDnsName,
    this.publicIp,
    this.ipv6Addresses,
    this.securityGroups,
  });
  static NetworkInterface fromJson(Map<String, dynamic> json) =>
      NetworkInterface();
}

class PreviewAgentsResponse {
  /// The resulting list of agents.
  final List<AgentPreview> agentPreviews;

  ///  When a response is generated, if there is more data to be listed, this
  /// parameter is present in the response and contains the value to use for the
  /// **nextToken** parameter in a subsequent pagination request. If there is no
  /// more data to be listed, this parameter is set to null.
  final String nextToken;

  PreviewAgentsResponse({
    @required this.agentPreviews,
    this.nextToken,
  });
  static PreviewAgentsResponse fromJson(Map<String, dynamic> json) =>
      PreviewAgentsResponse();
}

class PrivateIp {
  /// The DNS name of the private IP address.
  final String privateDnsName;

  /// The full IP address of the network inteface.
  final String privateIpAddress;

  PrivateIp({
    this.privateDnsName,
    this.privateIpAddress,
  });
  static PrivateIp fromJson(Map<String, dynamic> json) => PrivateIp();
}

class RemoveAttributesFromFindingsResponse {
  /// Attributes details that cannot be described. An error code is provided for
  /// each failed item.
  final Map<String, FailedItemDetails> failedItems;

  RemoveAttributesFromFindingsResponse({
    @required this.failedItems,
  });
  static RemoveAttributesFromFindingsResponse fromJson(
          Map<String, dynamic> json) =>
      RemoveAttributesFromFindingsResponse();
}

class ResourceGroup {
  /// The ARN of the resource group.
  final String arn;

  /// The tags (key and value pairs) of the resource group. This data type
  /// property is used in the CreateResourceGroup action.
  final List<ResourceGroupTag> tags;

  /// The time at which resource group is created.
  final DateTime createdAt;

  ResourceGroup({
    @required this.arn,
    @required this.tags,
    @required this.createdAt,
  });
  static ResourceGroup fromJson(Map<String, dynamic> json) => ResourceGroup();
}

class ResourceGroupTag {
  /// A tag key.
  final String key;

  /// The value assigned to a tag key.
  final String value;

  ResourceGroupTag({
    @required this.key,
    this.value,
  });
  static ResourceGroupTag fromJson(Map<String, dynamic> json) =>
      ResourceGroupTag();
}

class RulesPackage {
  /// The ARN of the rules package.
  final String arn;

  /// The name of the rules package.
  final String name;

  /// The version ID of the rules package.
  final String version;

  /// The provider of the rules package.
  final String provider;

  /// The description of the rules package.
  final String description;

  RulesPackage({
    @required this.arn,
    @required this.name,
    @required this.version,
    @required this.provider,
    this.description,
  });
  static RulesPackage fromJson(Map<String, dynamic> json) => RulesPackage();
}

class Scope {
  /// The type of the scope.
  final String key;

  /// The resource identifier for the specified scope type.
  final String value;

  Scope({
    this.key,
    this.value,
  });
  static Scope fromJson(Map<String, dynamic> json) => Scope();
}

class SecurityGroup {
  /// The name of the security group.
  final String groupName;

  /// The ID of the security group.
  final String groupId;

  SecurityGroup({
    this.groupName,
    this.groupId,
  });
  static SecurityGroup fromJson(Map<String, dynamic> json) => SecurityGroup();
}

class StartAssessmentRunResponse {
  /// The ARN of the assessment run that has been started.
  final String assessmentRunArn;

  StartAssessmentRunResponse({
    @required this.assessmentRunArn,
  });
  static StartAssessmentRunResponse fromJson(Map<String, dynamic> json) =>
      StartAssessmentRunResponse();
}

class Subscription {
  /// The ARN of the assessment template that is used during the event for which
  /// the SNS notification is sent.
  final String resourceArn;

  /// The ARN of the Amazon Simple Notification Service (SNS) topic to which the
  /// SNS notifications are sent.
  final String topicArn;

  /// The list of existing event subscriptions.
  final List<EventSubscription> eventSubscriptions;

  Subscription({
    @required this.resourceArn,
    @required this.topicArn,
    @required this.eventSubscriptions,
  });
  static Subscription fromJson(Map<String, dynamic> json) => Subscription();
}

class Tag {
  /// A tag key.
  final String key;

  /// A value assigned to a tag key.
  final String value;

  Tag({
    @required this.key,
    this.value,
  });
  static Tag fromJson(Map<String, dynamic> json) => Tag();
}

class TelemetryMetadata {
  /// A specific type of behavioral data that is collected by the agent.
  final String messageType;

  /// The count of messages that the agent sends to the Amazon Inspector
  /// service.
  final BigInt count;

  /// The data size of messages that the agent sends to the Amazon Inspector
  /// service.
  final BigInt dataSize;

  TelemetryMetadata({
    @required this.messageType,
    @required this.count,
    this.dataSize,
  });
  static TelemetryMetadata fromJson(Map<String, dynamic> json) =>
      TelemetryMetadata(
        messageType: json['messageType'] as String
          count: json['messageType']
      );
}

class TimestampRange {
  /// The minimum value of the timestamp range.
  final DateTime beginDate;

  /// The maximum value of the timestamp range.
  final DateTime endDate;

  TimestampRange({
    this.beginDate,
    this.endDate,
  });
}
