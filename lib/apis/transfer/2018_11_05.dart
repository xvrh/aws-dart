import 'package:meta/meta.dart';

/// AWS Transfer for SFTP is a fully managed service that enables the transfer
/// of files directly into and out of Amazon S3 using the Secure File Transfer
/// Protocol (SFTP)—also known as Secure Shell (SSH) File Transfer Protocol. AWS
/// helps you seamlessly migrate your file transfer workflows to AWS Transfer
/// for SFTP—by integrating with existing authentication systems, and providing
/// DNS routing with Amazon Route 53—so nothing changes for your customers and
/// partners, or their applications. With your data in S3, you can use it with
/// AWS services for processing, analytics, machine learning, and archiving.
/// Getting started with AWS Transfer for SFTP (AWS SFTP) is easy; there is no
/// infrastructure to buy and set up.
class TransferApi {
  /// Instantiates an autoscaling virtual server based on Secure File Transfer
  /// Protocol (SFTP) in AWS. When you make updates to your server or when you
  /// work with users, use the service-generated `ServerId` property that is
  /// assigned to the newly created server.
  ///
  /// [endpointDetails]: The virtual private cloud (VPC) endpoint settings that
  /// you want to configure for your SFTP server. This parameter is required
  /// when you specify a value for the `EndpointType` parameter.
  ///
  /// [endpointType]: The type of VPC endpoint that you want your SFTP server to
  /// connect to. If you connect to a VPC endpoint, your SFTP server isn't
  /// accessible over the public internet.
  ///
  /// [hostKey]: The RSA private key as generated by the `ssh-keygen -N "" -f
  /// my-new-server-key` command.
  ///
  ///  If you aren't planning to migrate existing users from an existing SFTP
  /// server to a new AWS SFTP server, don't update the host key. Accidentally
  /// changing a server's host key can be disruptive.
  ///
  ///  For more information, see
  /// "https://docs.aws.amazon.com/transfer/latest/userguide/change-host-key" in
  /// the _AWS SFTP User Guide._
  ///
  /// [identityProviderDetails]: This parameter is required when the
  /// `IdentityProviderType` is set to `API_GATEWAY`. Accepts an array
  /// containing all of the information required to call a customer-supplied
  /// authentication API, including the API Gateway URL. This property is not
  /// required when the `IdentityProviderType` is set to `SERVICE_MANAGED`.
  ///
  /// [identityProviderType]: Specifies the mode of authentication for the SFTP
  /// server. The default value is `SERVICE_MANAGED`, which allows you to store
  /// and access SFTP user credentials within the AWS Transfer for SFTP service.
  /// Use the `API_GATEWAY` value to integrate with an identity provider of your
  /// choosing. The `API_GATEWAY` setting requires you to provide an API Gateway
  /// endpoint URL to call for authentication using the
  /// `IdentityProviderDetails` parameter.
  ///
  /// [loggingRole]: A value that allows the service to write your SFTP users'
  /// activity to your Amazon CloudWatch logs for monitoring and auditing
  /// purposes.
  ///
  /// [tags]: Key-value pairs that can be used to group and search for servers.
  Future<CreateServerResponse> createServer(
      {EndpointDetails endpointDetails,
      String endpointType,
      String hostKey,
      IdentityProviderDetails identityProviderDetails,
      String identityProviderType,
      String loggingRole,
      List<Tag> tags}) async {
    return CreateServerResponse.fromJson({});
  }

  /// Creates a user and associates them with an existing Secure File Transfer
  /// Protocol (SFTP) server. You can only create and associate users with SFTP
  /// servers that have the `IdentityProviderType` set to `SERVICE_MANAGED`.
  /// Using parameters for `CreateUser`, you can specify the user name, set the
  /// home directory, store the user's public key, and assign the user's AWS
  /// Identity and Access Management (IAM) role. You can also optionally add a
  /// scope-down policy, and assign metadata with tags that can be used to group
  /// and search for users.
  ///
  /// [homeDirectory]: The landing directory (folder) for a user when they log
  /// in to the server using their SFTP client. An example is `/home/_username_`
  /// .
  ///
  /// [policy]: A scope-down policy for your user so you can use the same IAM
  /// role across multiple users. This policy scopes down user access to
  /// portions of their Amazon S3 bucket. Variables that you can use inside this
  /// policy include `${Transfer:UserName}`, `${Transfer:HomeDirectory}`, and
  /// `${Transfer:HomeBucket}`.
  ///
  ///
  ///
  /// For scope-down policies, AWS Transfer for SFTP stores the policy as a JSON
  /// blob, instead of the Amazon Resource Name (ARN) of the policy. You save
  /// the policy as a JSON blob and pass it in the `Policy` argument.
  ///
  /// For an example of a scope-down policy, see
  /// "https://docs.aws.amazon.com/transfer/latest/userguide/users.html#users-policies-scope-down">Creating
  /// a Scope-Down Policy.
  ///
  /// For more information, see
  /// "https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html"
  /// in the _AWS Security Token Service API Reference_.
  ///
  /// [role]: The IAM role that controls your user's access to your Amazon S3
  /// bucket. The policies attached to this role will determine the level of
  /// access you want to provide your users when transferring files into and out
  /// of your Amazon S3 bucket or buckets. The IAM role should also contain a
  /// trust relationship that allows the SFTP server to access your resources
  /// when servicing your SFTP user's transfer requests.
  ///
  /// [serverId]: A system-assigned unique identifier for an SFTP server
  /// instance. This is the specific SFTP server that you added your user to.
  ///
  /// [sshPublicKeyBody]: The public portion of the Secure Shell (SSH) key used
  /// to authenticate the user to the SFTP server.
  ///
  /// [tags]: Key-value pairs that can be used to group and search for users.
  /// Tags are metadata attached to users for any purpose.
  ///
  /// [userName]: A unique string that identifies a user and is associated with
  /// a server as specified by the `ServerId`. This user name must be a minimum
  /// of 3 and a maximum of 32 characters long. The following are valid
  /// characters: a-z, A-Z, 0-9, underscore, and hyphen. The user name can't
  /// start with a hyphen.
  Future<CreateUserResponse> createUser(
      {String homeDirectory,
      String policy,
      @required String role,
      @required String serverId,
      String sshPublicKeyBody,
      List<Tag> tags,
      @required String userName}) async {
    return CreateUserResponse.fromJson({});
  }

  /// Deletes the Secure File Transfer Protocol (SFTP) server that you specify.
  ///
  /// No response returns from this operation.
  ///
  /// [serverId]: A unique system-assigned identifier for an SFTP server
  /// instance.
  Future<void> deleteServer(String serverId) async {}

  /// Deletes a user's Secure Shell (SSH) public key.
  ///
  /// No response is returned from this operation.
  ///
  /// [serverId]: A system-assigned unique identifier for a Secure File Transfer
  /// Protocol (SFTP) server instance that has the user assigned to it.
  ///
  /// [sshPublicKeyId]: A unique identifier used to reference your user's
  /// specific SSH key.
  ///
  /// [userName]: A unique string that identifies a user whose public key is
  /// being deleted.
  Future<void> deleteSshPublicKey(
      {@required String serverId,
      @required String sshPublicKeyId,
      @required String userName}) async {}

  /// Deletes the user belonging to the server you specify.
  ///
  /// No response returns from this operation.
  ///
  ///
  ///
  /// When you delete a user from a server, the user's information is lost.
  ///
  /// [serverId]: A system-assigned unique identifier for an SFTP server
  /// instance that has the user assigned to it.
  ///
  /// [userName]: A unique string that identifies a user that is being deleted
  /// from the server.
  Future<void> deleteUser(
      {@required String serverId, @required String userName}) async {}

  /// Describes the server that you specify by passing the `ServerId` parameter.
  ///
  /// The response contains a description of the server's properties.
  ///
  /// [serverId]: A system-assigned unique identifier for an SFTP server.
  Future<DescribeServerResponse> describeServer(String serverId) async {
    return DescribeServerResponse.fromJson({});
  }

  /// Describes the user assigned to a specific server, as identified by its
  /// `ServerId` property.
  ///
  /// The response from this call returns the properties of the user associated
  /// with the `ServerId` value that was specified.
  ///
  /// [serverId]: A system-assigned unique identifier for an SFTP server that
  /// has this user assigned.
  ///
  /// [userName]: The name of the user assigned to one or more servers. User
  /// names are part of the sign-in credentials to use the AWS Transfer for SFTP
  /// service and perform file transfer tasks.
  Future<DescribeUserResponse> describeUser(
      {@required String serverId, @required String userName}) async {
    return DescribeUserResponse.fromJson({});
  }

  /// Adds a Secure Shell (SSH) public key to a user account identified by a
  /// `UserName` value assigned to a specific server, identified by `ServerId`.
  ///
  /// The response returns the `UserName` value, the `ServerId` value, and the
  /// name of the `SshPublicKeyId`.
  ///
  /// [serverId]: A system-assigned unique identifier for an SFTP server.
  ///
  /// [sshPublicKeyBody]: The public key portion of an SSH key pair.
  ///
  /// [userName]: The name of the user account that is assigned to one or more
  /// servers.
  Future<ImportSshPublicKeyResponse> importSshPublicKey(
      {@required String serverId,
      @required String sshPublicKeyBody,
      @required String userName}) async {
    return ImportSshPublicKeyResponse.fromJson({});
  }

  /// Lists the Secure File Transfer Protocol (SFTP) servers that are associated
  /// with your AWS account.
  ///
  /// [maxResults]: Specifies the number of servers to return as a response to
  /// the `ListServers` query.
  ///
  /// [nextToken]: When additional results are obtained from the `ListServers`
  /// command, a `NextToken` parameter is returned in the output. You can then
  /// pass the `NextToken` parameter in a subsequent command to continue listing
  /// additional servers.
  Future<ListServersResponse> listServers(
      {int maxResults, String nextToken}) async {
    return ListServersResponse.fromJson({});
  }

  /// Lists all of the tags associated with the Amazon Resource Number (ARN) you
  /// specify. The resource can be a user, server, or role.
  ///
  /// [arn]: Requests the tags associated with a particular Amazon Resource Name
  /// (ARN). An ARN is an identifier for a specific AWS resource, such as a
  /// server, user, or role.
  ///
  /// [maxResults]: Specifies the number of tags to return as a response to the
  /// `ListTagsForResource` request.
  ///
  /// [nextToken]: When you request additional results from the
  /// `ListTagsForResource` operation, a `NextToken` parameter is returned in
  /// the input. You can then pass in a subsequent command to the `NextToken`
  /// parameter to continue listing additional tags.
  Future<ListTagsForResourceResponse> listTagsForResource(String arn,
      {int maxResults, String nextToken}) async {
    return ListTagsForResourceResponse.fromJson({});
  }

  /// Lists the users for the server that you specify by passing the `ServerId`
  /// parameter.
  ///
  /// [maxResults]: Specifies the number of users to return as a response to the
  /// `ListUsers` request.
  ///
  /// [nextToken]: When you can get additional results from the `ListUsers`
  /// call, a `NextToken` parameter is returned in the output. You can then pass
  /// in a subsequent command to the `NextToken` parameter to continue listing
  /// additional users.
  ///
  /// [serverId]: A system-assigned unique identifier for a Secure File Transfer
  /// Protocol (SFTP) server that has users assigned to it.
  Future<ListUsersResponse> listUsers(String serverId,
      {int maxResults, String nextToken}) async {
    return ListUsersResponse.fromJson({});
  }

  /// Changes the state of a Secure File Transfer Protocol (SFTP) server from
  /// `OFFLINE` to `ONLINE`. It has no impact on an SFTP server that is already
  /// `ONLINE`. An `ONLINE` server can accept and process file transfer jobs.
  ///
  /// The state of `STARTING` indicates that the server is in an intermediate
  /// state, either not fully able to respond, or not fully online. The values
  /// of `START_FAILED` can indicate an error condition.
  ///
  /// No response is returned from this call.
  ///
  /// [serverId]: A system-assigned unique identifier for an SFTP server that
  /// you start.
  Future<void> startServer(String serverId) async {}

  /// Changes the state of an SFTP server from `ONLINE` to `OFFLINE`. An
  /// `OFFLINE` server cannot accept and process file transfer jobs. Information
  /// tied to your server such as server and user properties are not affected by
  /// stopping your server. Stopping a server will not reduce or impact your
  /// Secure File Transfer Protocol (SFTP) endpoint billing.
  ///
  /// The state of `STOPPING` indicates that the server is in an intermediate
  /// state, either not fully able to respond, or not fully offline. The values
  /// of `STOP_FAILED` can indicate an error condition.
  ///
  /// No response is returned from this call.
  ///
  /// [serverId]: A system-assigned unique identifier for an SFTP server that
  /// you stopped.
  Future<void> stopServer(String serverId) async {}

  /// Attaches a key-value pair to a resource, as identified by its Amazon
  /// Resource Name (ARN). Resources are users, servers, roles, and other
  /// entities.
  ///
  /// There is no response returned from this call.
  ///
  /// [arn]: An Amazon Resource Name (ARN) for a specific AWS resource, such as
  /// a server, user, or role.
  ///
  /// [tags]: Key-value pairs assigned to ARNs that you can use to group and
  /// search for resources by type. You can attach this metadata to user
  /// accounts for any purpose.
  Future<void> tagResource(
      {@required String arn, @required List<Tag> tags}) async {}

  /// If the `IdentityProviderType` of the server is `API_Gateway`, tests
  /// whether your API Gateway is set up successfully. We highly recommend that
  /// you call this operation to test your authentication method as soon as you
  /// create your server. By doing so, you can troubleshoot issues with the API
  /// Gateway integration to ensure that your users can successfully use the
  /// service.
  ///
  /// [serverId]: A system-assigned identifier for a specific server. That
  /// server's user authentication method is tested with a user name and
  /// password.
  ///
  /// [userName]: This request parameter is the name of the user account to be
  /// tested.
  ///
  /// [userPassword]: The password of the user account to be tested.
  Future<TestIdentityProviderResponse> testIdentityProvider(
      {@required String serverId,
      @required String userName,
      String userPassword}) async {
    return TestIdentityProviderResponse.fromJson({});
  }

  /// Detaches a key-value pair from a resource, as identified by its Amazon
  /// Resource Name (ARN). Resources are users, servers, roles, and other
  /// entities.
  ///
  /// No response is returned from this call.
  ///
  /// [arn]: This is the value of the resource that will have the tag removed.
  /// An Amazon Resource Name (ARN) is an identifier for a specific AWS
  /// resource, such as a server, user, or role.
  ///
  /// [tagKeys]: TagKeys are key-value pairs assigned to ARNs that can be used
  /// to group and search for resources by type. This metadata can be attached
  /// to resources for any purpose.
  Future<void> untagResource(
      {@required String arn, @required List<String> tagKeys}) async {}

  /// Updates the server properties after that server has been created.
  ///
  /// The `UpdateServer` call returns the `ServerId` of the Secure File Transfer
  /// Protocol (SFTP) server you updated.
  ///
  /// [endpointDetails]: The virtual private cloud (VPC) endpoint settings that
  /// are configured for your SFTP server. With a VPC endpoint, your SFTP server
  /// isn't accessible over the public internet.
  ///
  /// [endpointType]: The type of endpoint that you want your SFTP server to
  /// connect to. You can choose to connect to the public internet or a virtual
  /// private cloud (VPC) endpoint. With a VPC endpoint, your SFTP server isn't
  /// accessible over the public internet.
  ///
  /// [hostKey]: The RSA private key as generated by `ssh-keygen -N "" -f
  /// my-new-server-key`.
  ///
  ///  If you aren't planning to migrate existing users from an existing SFTP
  /// server to a new AWS SFTP server, don't update the host key. Accidentally
  /// changing a server's host key can be disruptive.
  ///
  ///  For more information, see
  /// "https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
  /// in the _AWS SFTP User Guide._
  ///
  /// [identityProviderDetails]: This response parameter is an array containing
  /// all of the information required to call a customer's authentication API
  /// method.
  ///
  /// [loggingRole]: A value that changes the AWS Identity and Access Management
  /// (IAM) role that allows Amazon S3 events to be logged in Amazon CloudWatch,
  /// turning logging on or off.
  ///
  /// [serverId]: A system-assigned unique identifier for an SFTP server
  /// instance that the user account is assigned to.
  Future<UpdateServerResponse> updateServer(String serverId,
      {EndpointDetails endpointDetails,
      String endpointType,
      String hostKey,
      IdentityProviderDetails identityProviderDetails,
      String loggingRole}) async {
    return UpdateServerResponse.fromJson({});
  }

  /// Assigns new properties to a user. Parameters you pass modify any or all of
  /// the following: the home directory, role, and policy for the `UserName` and
  /// `ServerId` you specify.
  ///
  /// The response returns the `ServerId` and the `UserName` for the updated
  /// user.
  ///
  /// [homeDirectory]: A parameter that specifies the landing directory (folder)
  /// for a user when they log in to the server using their client. An example
  /// is `/home/_username_` .
  ///
  /// [policy]: Allows you to supply a scope-down policy for your user so you
  /// can use the same AWS Identity and Access Management (IAM) role across
  /// multiple users. The policy scopes down user access to portions of your
  /// Amazon S3 bucket. Variables you can use inside this policy include
  /// `${Transfer:UserName}`, `${Transfer:HomeDirectory}`, and
  /// `${Transfer:HomeBucket}`.
  ///
  ///
  ///
  /// For scope-down policies, AWS Transfer for SFTP stores the policy as a JSON
  /// blob, instead of the Amazon Resource Name (ARN) of the policy. You save
  /// the policy as a JSON blob and pass it in the `Policy` argument.
  ///
  /// For an example of a scope-down policy, see
  /// "https://docs.aws.amazon.com/transfer/latest/userguide/users.html#users-policies-scope-down">Creating
  /// a Scope-Down Policy.
  ///
  /// For more information, see
  /// "https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html"
  /// in the _AWS Security Token Service API Reference_.
  ///
  /// [role]: The IAM role that controls your user's access to your Amazon S3
  /// bucket. The policies attached to this role will determine the level of
  /// access you want to provide your users when transferring files into and out
  /// of your Amazon S3 bucket or buckets. The IAM role should also contain a
  /// trust relationship that allows the Secure File Transfer Protocol (SFTP)
  /// server to access your resources when servicing your SFTP user's transfer
  /// requests.
  ///
  /// [serverId]: A system-assigned unique identifier for an SFTP server
  /// instance that the user account is assigned to.
  ///
  /// [userName]: A unique string that identifies a user and is associated with
  /// a server as specified by the `ServerId`. This is the string that will be
  /// used by your user when they log in to your SFTP server. This user name is
  /// a minimum of 3 and a maximum of 32 characters long. The following are
  /// valid characters: a-z, A-Z, 0-9, underscore, and hyphen. The user name
  /// can't start with a hyphen.
  Future<UpdateUserResponse> updateUser(
      {String homeDirectory,
      String policy,
      String role,
      @required String serverId,
      @required String userName}) async {
    return UpdateUserResponse.fromJson({});
  }
}

class CreateServerResponse {
  /// The service-assigned ID of the SFTP server that is created.
  final String serverId;

  CreateServerResponse({
    @required this.serverId,
  });
  static CreateServerResponse fromJson(Map<String, dynamic> json) =>
      CreateServerResponse();
}

class CreateUserResponse {
  /// The ID of the SFTP server that the user is attached to.
  final String serverId;

  /// A unique string that identifies a user account associated with an SFTP
  /// server.
  final String userName;

  CreateUserResponse({
    @required this.serverId,
    @required this.userName,
  });
  static CreateUserResponse fromJson(Map<String, dynamic> json) =>
      CreateUserResponse();
}

class DescribeServerResponse {
  /// An array containing the properties of the server with the `ServerID` you
  /// specified.
  final DescribedServer server;

  DescribeServerResponse({
    @required this.server,
  });
  static DescribeServerResponse fromJson(Map<String, dynamic> json) =>
      DescribeServerResponse();
}

class DescribeUserResponse {
  /// A system-assigned unique identifier for an SFTP server that has this user
  /// assigned.
  final String serverId;

  /// An array containing the properties of the user account for the `ServerID`
  /// value that you specified.
  final DescribedUser user;

  DescribeUserResponse({
    @required this.serverId,
    @required this.user,
  });
  static DescribeUserResponse fromJson(Map<String, dynamic> json) =>
      DescribeUserResponse();
}

/// Describes the properties of the server that was specified. Information
/// returned includes the following: the server Amazon Resource Name (ARN), the
/// authentication configuration and type, the logging role, the server ID and
/// state, and assigned tags or metadata.
class DescribedServer {
  /// Specifies the unique Amazon Resource Name (ARN) for the server to be
  /// described.
  final String arn;

  /// The virtual private cloud (VPC) endpoint settings that you configured for
  /// your SFTP server.
  final EndpointDetails endpointDetails;

  /// The type of endpoint that your SFTP server is connected to. If your SFTP
  /// server is connected to a VPC endpoint, your server isn't accessible over
  /// the public internet.
  final String endpointType;

  /// This value contains the message-digest algorithm (MD5) hash of the
  /// server's host key. This value is equivalent to the output of the
  /// `ssh-keygen -l -E md5 -f my-new-server-key` command.
  final String hostKeyFingerprint;

  /// Specifies information to call a customer-supplied authentication API. This
  /// field is not populated when the `IdentityProviderType` of the server is
  /// `SERVICE_MANAGED`>.
  final IdentityProviderDetails identityProviderDetails;

  /// This property defines the mode of authentication method enabled for this
  /// service. A value of `SERVICE_MANAGED` means that you are using this server
  /// to store and access SFTP user credentials within the service. A value of
  /// `API_GATEWAY` indicates that you have integrated an API Gateway endpoint
  /// that will be invoked for authenticating your user into the service.
  final String identityProviderType;

  /// This property is an AWS Identity and Access Management (IAM) entity that
  /// allows the server to turn on Amazon CloudWatch logging for Amazon S3
  /// events. When set, user activity can be viewed in your CloudWatch logs.
  final String loggingRole;

  /// This property is a unique system-assigned identifier for the SFTP server
  /// that you instantiate.
  final String serverId;

  /// The condition of the SFTP server for the server that was described. A
  /// value of `ONLINE` indicates that the server can accept jobs and transfer
  /// files. A `State` value of `OFFLINE` means that the server cannot perform
  /// file transfer operations.
  ///
  /// The states of `STARTING` and `STOPPING` indicate that the server is in an
  /// intermediate state, either not fully able to respond, or not fully
  /// offline. The values of `START_FAILED` or `STOP_FAILED` can indicate an
  /// error condition.
  final String state;

  /// This property contains the key-value pairs that you can use to search for
  /// and group servers that were assigned to the server that was described.
  final List<Tag> tags;

  /// The number of users that are assigned to the SFTP server you specified
  /// with the `ServerId`.
  final int userCount;

  DescribedServer({
    @required this.arn,
    this.endpointDetails,
    this.endpointType,
    this.hostKeyFingerprint,
    this.identityProviderDetails,
    this.identityProviderType,
    this.loggingRole,
    this.serverId,
    this.state,
    this.tags,
    this.userCount,
  });
  static DescribedServer fromJson(Map<String, dynamic> json) =>
      DescribedServer();
}

/// Returns properties of the user that you want to describe.
class DescribedUser {
  /// This property contains the unique Amazon Resource Name (ARN) for the user
  /// that was requested to be described.
  final String arn;

  /// This property specifies the landing directory (or folder), which is the
  /// location that files are written to or read from in an Amazon S3 bucket for
  /// the described user. An example is `/_bucket_name_/home/_username_` .
  final String homeDirectory;

  /// Specifies the name of the policy in use for the described user.
  final String policy;

  /// This property specifies the IAM role that controls your user's access to
  /// your Amazon S3 bucket. The policies attached to this role will determine
  /// the level of access you want to provide your users when transferring files
  /// into and out of your Amazon S3 bucket or buckets. The IAM role should also
  /// contain a trust relationship that allows the SFTP server to access your
  /// resources when servicing your SFTP user's transfer requests.
  final String role;

  /// This property contains the public key portion of the Secure Shell (SSH)
  /// keys stored for the described user.
  final List<SshPublicKey> sshPublicKeys;

  /// This property contains the key-value pairs for the user requested. Tag can
  /// be used to search for and group users for a variety of purposes.
  final List<Tag> tags;

  /// This property is the name of the user that was requested to be described.
  /// User names are used for authentication purposes. This is the string that
  /// will be used by your user when they log in to your SFTP server.
  final String userName;

  DescribedUser({
    @required this.arn,
    this.homeDirectory,
    this.policy,
    this.role,
    this.sshPublicKeys,
    this.tags,
    this.userName,
  });
  static DescribedUser fromJson(Map<String, dynamic> json) => DescribedUser();
}

/// The configuration settings for the virtual private cloud (VPC) endpoint for
/// your SFTP server.
class EndpointDetails {
  /// The ID of the VPC endpoint.
  final String vpcEndpointId;

  EndpointDetails({
    this.vpcEndpointId,
  });
  static EndpointDetails fromJson(Map<String, dynamic> json) =>
      EndpointDetails();
}

/// Returns information related to the type of user authentication that is in
/// use for a server's users. A server can have only one method of
/// authentication.
class IdentityProviderDetails {
  /// The `Url` parameter provides contains the location of the service endpoint
  /// used to authenticate users.
  final String url;

  /// The `InvocationRole` parameter provides the type of `InvocationRole` used
  /// to authenticate the user account.
  final String invocationRole;

  IdentityProviderDetails({
    this.url,
    this.invocationRole,
  });
  static IdentityProviderDetails fromJson(Map<String, dynamic> json) =>
      IdentityProviderDetails();
}

/// This response identifies the user, the server they belong to, and the
/// identifier of the SSH public key associated with that user. A user can have
/// more than one key on each server that they are associated with.
class ImportSshPublicKeyResponse {
  /// A system-assigned unique identifier for an SFTP server.
  final String serverId;

  /// This identifier is the name given to a public key by the system that was
  /// imported.
  final String sshPublicKeyId;

  /// A user name assigned to the `ServerID` value that you specified.
  final String userName;

  ImportSshPublicKeyResponse({
    @required this.serverId,
    @required this.sshPublicKeyId,
    @required this.userName,
  });
  static ImportSshPublicKeyResponse fromJson(Map<String, dynamic> json) =>
      ImportSshPublicKeyResponse();
}

class ListServersResponse {
  /// When you can get additional results from the `ListServers` operation, a
  /// `NextToken` parameter is returned in the output. In a following command,
  /// you can pass in the `NextToken` parameter to continue listing additional
  /// servers.
  final String nextToken;

  /// An array of servers that were listed.
  final List<ListedServer> servers;

  ListServersResponse({
    this.nextToken,
    @required this.servers,
  });
  static ListServersResponse fromJson(Map<String, dynamic> json) =>
      ListServersResponse();
}

class ListTagsForResourceResponse {
  /// This value is the ARN you specified to list the tags of.
  final String arn;

  /// When you can get additional results from the `ListTagsForResource` call, a
  /// `NextToken` parameter is returned in the output. You can then pass in a
  /// subsequent command to the `NextToken` parameter to continue listing
  /// additional tags.
  final String nextToken;

  /// Key-value pairs that are assigned to a resource, usually for the purpose
  /// of grouping and searching for items. Tags are metadata that you define.
  final List<Tag> tags;

  ListTagsForResourceResponse({
    this.arn,
    this.nextToken,
    this.tags,
  });
  static ListTagsForResourceResponse fromJson(Map<String, dynamic> json) =>
      ListTagsForResourceResponse();
}

class ListUsersResponse {
  /// When you can get additional results from the `ListUsers` call, a
  /// `NextToken` parameter is returned in the output. You can then pass in a
  /// subsequent command to the `NextToken` parameter to continue listing
  /// additional users.
  final String nextToken;

  /// A system-assigned unique identifier for an SFTP server that the users are
  /// assigned to.
  final String serverId;

  /// Returns the user accounts and their properties for the `ServerId` value
  /// that you specify.
  final List<ListedUser> users;

  ListUsersResponse({
    this.nextToken,
    @required this.serverId,
    @required this.users,
  });
  static ListUsersResponse fromJson(Map<String, dynamic> json) =>
      ListUsersResponse();
}

/// Returns properties of the server that was specified.
class ListedServer {
  /// The unique Amazon Resource Name (ARN) for the server to be listed.
  final String arn;

  /// The authentication method used to validate a user for the server that was
  /// specified. This can include Secure Shell (SSH), user name and password
  /// combinations, or your own custom authentication method. Valid values
  /// include `SERVICE_MANAGED` or `API_GATEWAY`.
  final String identityProviderType;

  /// The type of VPC endpoint that your SFTP server is connected to. If your
  /// SFTP server is connected to a VPC endpoint, your server isn't accessible
  /// over the public internet.
  final String endpointType;

  /// The AWS Identity and Access Management entity that allows the server to
  /// turn on Amazon CloudWatch logging.
  final String loggingRole;

  /// This value is the unique system assigned identifier for the SFTP servers
  /// that were listed.
  final String serverId;

  /// This property describes the condition of the SFTP server for the server
  /// that was described. A value of `ONLINE`> indicates that the server can
  /// accept jobs and transfer files. A `State` value of `OFFLINE` means that
  /// the server cannot perform file transfer operations.
  ///
  /// The states of `STARTING` and `STOPPING` indicate that the server is in an
  /// intermediate state, either not fully able to respond, or not fully
  /// offline. The values of `START_FAILED` or `STOP_FAILED` can indicate an
  /// error condition.
  final String state;

  /// This property is a numeric value that indicates the number of users that
  /// are assigned to the SFTP server you specified with the `ServerId`.
  final int userCount;

  ListedServer({
    @required this.arn,
    this.identityProviderType,
    this.endpointType,
    this.loggingRole,
    this.serverId,
    this.state,
    this.userCount,
  });
  static ListedServer fromJson(Map<String, dynamic> json) => ListedServer();
}

/// Returns properties of the user that you specify.
class ListedUser {
  /// This property is the unique Amazon Resource Name (ARN) for the user that
  /// you want to learn about.
  final String arn;

  /// This value specifies the location that files are written to or read from
  /// an Amazon S3 bucket for the user you specify by their ARN.
  final String homeDirectory;

  /// The role in use by this user. A _role_ is an AWS Identity and Access
  /// Management (IAM) entity that, in this case, allows the SFTP server to act
  /// on a user's behalf. It allows the server to inherit the trust relationship
  /// that enables that user to perform file operations to their Amazon S3
  /// bucket.
  final String role;

  /// This value is the number of SSH public keys stored for the user you
  /// specified.
  final int sshPublicKeyCount;

  /// The name of the user whose ARN was specified. User names are used for
  /// authentication purposes.
  final String userName;

  ListedUser({
    @required this.arn,
    this.homeDirectory,
    this.role,
    this.sshPublicKeyCount,
    this.userName,
  });
  static ListedUser fromJson(Map<String, dynamic> json) => ListedUser();
}

/// Provides information about the public Secure Shell (SSH) key that is
/// associated with a user account for a specific server (as identified by
/// `ServerId`). The information returned includes the date the key was
/// imported, the public key contents, and the public key ID. A user can store
/// more than one SSH public key associated with their user name on a specific
/// SFTP server.
class SshPublicKey {
  /// The date that the public key was added to the user account.
  final DateTime dateImported;

  /// The content of the SSH public key as specified by the `PublicKeyId`.
  final String sshPublicKeyBody;

  /// The `SshPublicKeyId` parameter contains the identifier of the public key.
  final String sshPublicKeyId;

  SshPublicKey({
    @required this.dateImported,
    @required this.sshPublicKeyBody,
    @required this.sshPublicKeyId,
  });
  static SshPublicKey fromJson(Map<String, dynamic> json) => SshPublicKey();
}

/// Creates a key-value pair for a specific resource. Tags are metadata that you
/// can use to search for and group a resource for various purposes. You can
/// apply tags to servers, users, and roles. A tag key can take more than one
/// value. For example, to group servers for accounting purposes, you might
/// create a tag called `Group` and assign the values `Research` and
/// `Accounting` to that group.
class Tag {
  /// The name assigned to the tag that you create.
  final String key;

  /// This property contains one or more values that you assigned to the key
  /// name you create.
  final String value;

  Tag({
    @required this.key,
    @required this.value,
  });
  static Tag fromJson(Map<String, dynamic> json) => Tag();
}

class TestIdentityProviderResponse {
  /// The response that is returned from your API Gateway.
  final String response;

  /// The HTTP status code that is the response from your API Gateway.
  final int statusCode;

  /// A message that indicates whether the test was successful or not.
  final String message;

  /// The endpoint of the service used to authenticate a user.
  final String url;

  TestIdentityProviderResponse({
    this.response,
    @required this.statusCode,
    this.message,
    @required this.url,
  });
  static TestIdentityProviderResponse fromJson(Map<String, dynamic> json) =>
      TestIdentityProviderResponse();
}

class UpdateServerResponse {
  /// A system-assigned unique identifier for an SFTP server that the user
  /// account is assigned to.
  final String serverId;

  UpdateServerResponse({
    @required this.serverId,
  });
  static UpdateServerResponse fromJson(Map<String, dynamic> json) =>
      UpdateServerResponse();
}

///  `UpdateUserResponse` returns the user name and server identifier for the
/// request to update a user's properties.
class UpdateUserResponse {
  /// A system-assigned unique identifier for an SFTP server instance that the
  /// user account is assigned to.
  final String serverId;

  /// The unique identifier for a user that is assigned to the SFTP server
  /// instance that was specified in the request.
  final String userName;

  UpdateUserResponse({
    @required this.serverId,
    @required this.userName,
  });
  static UpdateUserResponse fromJson(Map<String, dynamic> json) =>
      UpdateUserResponse();
}
